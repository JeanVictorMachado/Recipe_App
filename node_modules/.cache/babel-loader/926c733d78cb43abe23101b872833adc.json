{"ast":null,"code":"var _jsxFileName = \"/home/jean/projetos-pessoais-portifolio/Recipe_App/src/components/IngredientsCheckbox/index.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ContextAPI from '../../Context/ContextAPI';\n\nconst IngredientsCheckbox = () => {\n  const {\n    detailsInfo,\n    setIsRecipeFinished\n  } = useContext(ContextAPI);\n  const [checkedIdList, setCheckedIdList] = useState([]);\n  const paramID = useParams().id;\n  const path = window.location.href;\n\n  const getIngredientsOrMeasure = param => {\n    let dataObject = {};\n    if (path.includes('comidas')) dataObject = detailsInfo.foods;else dataObject = detailsInfo.drinks;\n    const dataKeys = Object.keys(dataObject).filter(key => key.includes(param) && dataObject[key] !== '' && dataObject[key] !== ' ' && dataObject[key] !== null);\n    const ingredients = dataKeys.map(key => dataObject[key]);\n    return ingredients;\n  };\n\n  const loadCheckedIngredientsLocalStorage = () => {\n    if (localStorage.getItem('checkedIngredients') === null) {\n      const checkedIngredients = {\n        cocktails: {},\n        meals: {}\n      };\n      localStorage.setItem('checkedIngredients', JSON.stringify(checkedIngredients));\n    }\n\n    const checkedIngredients = JSON.parse(localStorage.getItem('checkedIngredients'));\n\n    if (path.includes('comidas')) {\n      setCheckedIdList(checkedIngredients.meals[paramID] || []);\n    } else setCheckedIdList(checkedIngredients.cocktails[paramID] || []);\n  };\n\n  const setDoneRecipeBtn = () => {\n    const ingredientsList = getIngredientsOrMeasure('strIngredient');\n    if (ingredientsList.length === checkedIdList.length) setIsRecipeFinished(true);else setIsRecipeFinished(false);\n  };\n\n  useEffect(() => {\n    loadCheckedIngredientsLocalStorage();\n  }, []);\n  useEffect(() => {\n    setDoneRecipeBtn();\n  }, [detailsInfo]);\n\n  const saveCheckedIngredient = (checkedIngredients, target) => {\n    const isFoodPage = path.includes('comidas');\n    let ingredientsToSave = {};\n\n    if (isFoodPage) {\n      ingredientsToSave = { ...checkedIngredients,\n        meals: { ...checkedIngredients.meals,\n          [paramID]: checkedIngredients.meals[paramID] ? [...checkedIngredients.meals[paramID], target.id] : [target.id]\n        }\n      };\n    } else {\n      ingredientsToSave = { ...checkedIngredients,\n        cocktails: { ...checkedIngredients.cocktails,\n          [paramID]: checkedIngredients.cocktails[paramID] ? [...checkedIngredients.cocktails[paramID], target.id] : [target.id]\n        }\n      };\n    }\n\n    localStorage.setItem('checkedIngredients', JSON.stringify(ingredientsToSave));\n    const ingredientsChecked = isFoodPage ? ingredientsToSave.meals[paramID] : ingredientsToSave.cocktails[paramID];\n    setCheckedIdList(ingredientsChecked);\n    const ingredientsList = getIngredientsOrMeasure('strIngredient');\n    if (ingredientsList.length === ingredientsChecked.length) setIsRecipeFinished(true);\n  };\n\n  const removeCheckedIngredient = (checkedIngredients, target) => {\n    const isFoodPage = path.includes('comidas');\n    let ingredientsToSave = {};\n\n    if (isFoodPage) {\n      ingredientsToSave = { ...checkedIngredients,\n        meals: { ...checkedIngredients.meals,\n          [paramID]: [...checkedIngredients.meals[paramID].filter(id => id !== target.id)]\n        }\n      };\n    } else {\n      ingredientsToSave = { ...checkedIngredients,\n        cocktails: { ...checkedIngredients.cocktails,\n          [paramID]: [...checkedIngredients.cocktails[paramID].filter(id => id !== target.id)]\n        }\n      };\n    }\n\n    localStorage.setItem('checkedIngredients', JSON.stringify(ingredientsToSave));\n    const ingredientsChecked = isFoodPage ? ingredientsToSave.meals[paramID] : ingredientsToSave.cocktails[paramID];\n    setCheckedIdList(ingredientsChecked);\n    const ingredientsList = getIngredientsOrMeasure('strIngredient');\n    if (ingredientsList.length !== ingredientsChecked.length) setIsRecipeFinished(false);\n  };\n\n  const handleCheckbox = target => {\n    const checkedIngredients = JSON.parse(localStorage.getItem('checkedIngredients'));\n\n    if (target.checked === true) {\n      saveCheckedIngredient(checkedIngredients, target);\n    } else {\n      removeCheckedIngredient(checkedIngredients, target);\n    }\n\n    return target.id;\n  };\n\n  const showIngredientsCheckbox = () => {\n    const ingredientsList = getIngredientsOrMeasure('strIngredient');\n    const measuresList = getIngredientsOrMeasure('strMeasure');\n    return ingredientsList.map((ingred, i) => /*#__PURE__*/React.createElement(\"label\", {\n      key: i,\n      htmlFor: i,\n      className: \"input-checkbox\",\n      \"data-testid\": `${i}-ingredient-step`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"checkbox-input\",\n      type: \"checkbox\",\n      checked: checkedIdList.includes(i.toString()),\n      id: i,\n      onChange: ({\n        target\n      }) => handleCheckbox(target),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }\n    }), `${ingred} - ${measuresList[i]}`));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box-ingredients\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"span-ingredients\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, \"Ingredients\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, showIngredientsCheckbox()));\n};\n\nexport default IngredientsCheckbox;","map":{"version":3,"sources":["/home/jean/projetos-pessoais-portifolio/Recipe_App/src/components/IngredientsCheckbox/index.js"],"names":["React","useContext","useEffect","useState","useParams","ContextAPI","IngredientsCheckbox","detailsInfo","setIsRecipeFinished","checkedIdList","setCheckedIdList","paramID","id","path","window","location","href","getIngredientsOrMeasure","param","dataObject","includes","foods","drinks","dataKeys","Object","keys","filter","key","ingredients","map","loadCheckedIngredientsLocalStorage","localStorage","getItem","checkedIngredients","cocktails","meals","setItem","JSON","stringify","parse","setDoneRecipeBtn","ingredientsList","length","saveCheckedIngredient","target","isFoodPage","ingredientsToSave","ingredientsChecked","removeCheckedIngredient","handleCheckbox","checked","showIngredientsCheckbox","measuresList","ingred","i","toString"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ContextAPI from '../../Context/ContextAPI';\n\nconst IngredientsCheckbox = () => {\n  const { detailsInfo, setIsRecipeFinished } = useContext(ContextAPI);\n  const [checkedIdList, setCheckedIdList] = useState([]);\n  const paramID = useParams().id;\n  const path = window.location.href;\n\n  const getIngredientsOrMeasure = (param) => {\n    let dataObject = {};\n    if (path.includes('comidas')) dataObject = detailsInfo.foods;\n    else dataObject = detailsInfo.drinks;\n\n    const dataKeys = Object.keys(dataObject)\n      .filter((key) => key.includes(param)\n        && dataObject[key] !== '' && dataObject[key] !== ' ' && dataObject[key] !== null);\n\n    const ingredients = dataKeys\n      .map((key) => dataObject[key]);\n\n    return ingredients;\n  };\n\n  const loadCheckedIngredientsLocalStorage = () => {\n    if (localStorage.getItem('checkedIngredients') === null) {\n      const checkedIngredients = {\n        cocktails: {},\n        meals: {},\n      };\n      localStorage.setItem('checkedIngredients', JSON.stringify(checkedIngredients));\n    }\n\n    const checkedIngredients = JSON.parse(localStorage.getItem('checkedIngredients'));\n    if (path.includes('comidas')) {\n      setCheckedIdList(checkedIngredients.meals[paramID] || []);\n    } else setCheckedIdList(checkedIngredients.cocktails[paramID] || []);\n  };\n\n  const setDoneRecipeBtn = () => {\n    const ingredientsList = getIngredientsOrMeasure('strIngredient');\n\n    if (ingredientsList.length === checkedIdList.length) setIsRecipeFinished(true);\n    else setIsRecipeFinished(false);\n  };\n\n  useEffect(() => {\n    loadCheckedIngredientsLocalStorage();\n  }, []);\n\n  useEffect(() => {\n    setDoneRecipeBtn();\n  }, [detailsInfo]);\n\n  const saveCheckedIngredient = (checkedIngredients, target) => {\n    const isFoodPage = path.includes('comidas');\n    let ingredientsToSave = {};\n\n    if (isFoodPage) {\n      ingredientsToSave = {\n        ...checkedIngredients,\n        meals: {\n          ...checkedIngredients.meals,\n          [paramID]: checkedIngredients.meals[paramID] ? [\n            ...checkedIngredients.meals[paramID],\n            target.id,\n          ] : [target.id],\n        },\n      };\n    } else {\n      ingredientsToSave = {\n        ...checkedIngredients,\n        cocktails: {\n          ...checkedIngredients.cocktails,\n          [paramID]: checkedIngredients.cocktails[paramID] ? [\n            ...checkedIngredients.cocktails[paramID],\n            target.id,\n          ] : [target.id],\n        },\n      };\n    }\n\n    localStorage.setItem('checkedIngredients', JSON.stringify(ingredientsToSave));\n    const ingredientsChecked = isFoodPage\n      ? ingredientsToSave.meals[paramID] : ingredientsToSave.cocktails[paramID];\n\n    setCheckedIdList(ingredientsChecked);\n    const ingredientsList = getIngredientsOrMeasure('strIngredient');\n\n    if (ingredientsList.length === ingredientsChecked.length) setIsRecipeFinished(true);\n  };\n\n  const removeCheckedIngredient = (checkedIngredients, target) => {\n    const isFoodPage = path.includes('comidas');\n    let ingredientsToSave = {};\n\n    if (isFoodPage) {\n      ingredientsToSave = {\n        ...checkedIngredients,\n        meals: {\n          ...checkedIngredients.meals,\n          [paramID]: [\n            ...checkedIngredients.meals[paramID].filter((id) => id !== target.id),\n          ],\n        },\n      };\n    } else {\n      ingredientsToSave = {\n        ...checkedIngredients,\n        cocktails: {\n          ...checkedIngredients.cocktails,\n          [paramID]: [\n            ...checkedIngredients.cocktails[paramID].filter((id) => id !== target.id),\n          ],\n        },\n      };\n    }\n    localStorage.setItem('checkedIngredients', JSON.stringify(ingredientsToSave));\n    const ingredientsChecked = isFoodPage\n      ? ingredientsToSave.meals[paramID] : ingredientsToSave.cocktails[paramID];\n\n    setCheckedIdList(ingredientsChecked);\n    const ingredientsList = getIngredientsOrMeasure('strIngredient');\n\n    if (ingredientsList.length !== ingredientsChecked.length) setIsRecipeFinished(false);\n  };\n\n  const handleCheckbox = (target) => {\n    const checkedIngredients = JSON.parse(localStorage.getItem('checkedIngredients'));\n\n    if (target.checked === true) {\n      saveCheckedIngredient(checkedIngredients, target);\n    } else {\n      removeCheckedIngredient(checkedIngredients, target);\n    }\n\n    return target.id;\n  };\n\n  const showIngredientsCheckbox = () => {\n    const ingredientsList = getIngredientsOrMeasure('strIngredient');\n    const measuresList = getIngredientsOrMeasure('strMeasure');\n\n    return (\n      ingredientsList.map((ingred, i) => (\n        <label\n          key={ i }\n          htmlFor={ i }\n          className=\"input-checkbox\"\n          data-testid={ `${i}-ingredient-step` }\n        >\n          <input\n            className=\"checkbox-input\"\n            type=\"checkbox\"\n            checked={ checkedIdList.includes(i.toString()) }\n            id={ i }\n            onChange={ (({ target }) => handleCheckbox(target)) }\n          />\n          {`${ingred} - ${measuresList[i]}`}\n        </label>\n      ))\n    );\n  };\n\n  return (\n    <div className=\"box-ingredients\">\n      <div className=\"span-ingredients\">\n        <span>Ingredients</span>\n      </div>\n      <div className=\"container-checkbox\">\n        {showIngredientsCheckbox()}\n      </div>\n    </div>\n  );\n};\n\nexport default IngredientsCheckbox;\n"]},"metadata":{},"sourceType":"module"}